name: Docker Build & Release

on:
  push:
    branches:
      - stable
      - develop
      - alpha
      - beta
  pull_request:
    branches:
      - stable
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    # Only run tests on stable, latest or stable branches (for push or PR to those branches)
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/stable' || github.ref == 'refs/heads/latest' || github.ref == 'refs/heads/stable')) || (github.event_name == 'pull_request' && (github.base_ref == 'stable' || github.base_ref == 'latest' || github.base_ref == 'stable'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          files: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    # Only run lint on stable, latest or stable branches (push or PR targeting these branches)
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/stable' || github.ref == 'refs/heads/latest' || github.ref == 'refs/heads/stable')) || (github.event_name == 'pull_request' && (github.base_ref == 'stable' || github.base_ref == 'latest' || github.base_ref == 'stable'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

  semantic-release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [test, lint]
    # Allow to run on push and on PR (PR will be dry-run)
    if: |
      always() && 
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.lint.result == 'success' || needs.lint.result == 'skipped') &&
      (
        github.event_name == 'pull_request' ||
        (github.event_name == 'push' && (github.ref == 'refs/heads/stable' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/alpha' || github.ref == 'refs/heads/beta'))
      )
    permissions:
      contents: write
      issues: write
      packages: write
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
      published: ${{ steps.semantic.outputs.new_release_published }}
      channel: ${{ steps.semantic.outputs.new_release_channel }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@23 \
            @semantic-release/github@12 \
            @semantic-release/git@10 \
            @semantic-release/changelog@6 \
            @semantic-release/exec@6 \
            conventional-changelog-conventionalcommits@7

      - name: Run semantic-release (dry-run on PR)
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            npx semantic-release --dry-run
          else
            npx semantic-release
          fi

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint, semantic-release]
    # SOLO construir Docker cuando semantic-release haya publicado una nueva versión
    if: |
      always() && 
      (needs.test.result == 'success' || needs.test.result == 'skipped') &&
      (needs.lint.result == 'success' || needs.lint.result == 'skipped') &&
      needs.semantic-release.result == 'success' &&
      needs.semantic-release.outputs.published == 'true' &&
      github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Para STABLE: latest, stable, v1.0.0, v1.0, v1 (SOLO cuando hay release)
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/stable' && needs.semantic-release.outputs.published == 'true' }}
            type=raw,value=stable,enable=${{ github.ref == 'refs/heads/stable' && needs.semantic-release.outputs.published == 'true' }}
            type=semver,pattern={{version}},value=${{ needs.semantic-release.outputs.version }},enable=${{ needs.semantic-release.outputs.published == 'true' && github.ref == 'refs/heads/stable' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.semantic-release.outputs.version }},enable=${{ needs.semantic-release.outputs.published == 'true' && github.ref == 'refs/heads/stable' }}
            type=semver,pattern={{major}},value=${{ needs.semantic-release.outputs.version }},enable=${{ needs.semantic-release.outputs.published == 'true' && github.ref == 'refs/heads/stable' }}
            # Para DEVELOP: develop + versión semántica (SOLO cuando hay release)
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' && needs.semantic-release.outputs.published == 'true' }}
            type=semver,pattern={{version}},value=${{ needs.semantic-release.outputs.version }},enable=${{ needs.semantic-release.outputs.published == 'true' && github.ref == 'refs/heads/develop' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.semantic-release.outputs.version }}
            COMMIT_SHA=${{ github.sha }}

      - name: Generate Docker image summary
        run: |
          echo "## Docker Image Published 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Tags:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version: ${{ needs.semantic-release.outputs.version || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "### Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "### Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
