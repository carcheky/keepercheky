name: JVM Image

on:
  push:
    paths:
      - src/**
      - buildSrc/**
      - .github/**
      - build.gradle.kts
      - settings.gradle.kts
      - gradle.properties
    tags:
      - '**'
    branches:
      - 'develop'
      - 'main'

  pull_request:
    paths:
      - src/**
      - buildSrc/**
      - .github/**
      - build.gradle.kts
      - settings.gradle.kts
    branches:
      - '**'

  workflow_dispatch:

jobs:
  build-jvm-x86:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 25
        uses: actions/setup-java@v5
        with:
          java-version: '25'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build JVM OCI Image
        run: ./gradlew bootBuildImage --publishImage --imagePlatform linux/amd64
        env:
          USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: "en_US.UTF-8"
          IMAGE_TYPE: "jvm"
          TARGET_PLATFORM: "amd64"

  build-jvm-aarch64:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 25
        uses: actions/setup-java@v5
        with:
          java-version: '25'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build JVM ARM64 OCI Image
        run: ./gradlew bootBuildImage --publishImage --imagePlatform linux/arm64
        env:
          USERNAME: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LC_ALL: "en_US.UTF-8"
          IMAGE_TYPE: "jvm"
          TARGET_PLATFORM: "arm64"

  combine-images:
    runs-on: ubuntu-latest
    needs: [build-jvm-x86, build-jvm-aarch64]
    steps:

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Export branch name
        uses: mad9000/actions-find-and-replace-string@5
        id: branch_name
        with:
          source: ${{ github.ref_name }}
          find: '/'
          replace: '-'

      - name: Extract version without v prefix
        id: version_number
        run: |
          VERSION="${{ steps.branch_name.outputs.value }}"
          # Remove 'v' prefix if it exists
          VERSION_NO_V="${VERSION#v}"
          echo "value=$VERSION_NO_V" >> $GITHUB_OUTPUT

      - name: Combine JVM images into single manifest
        uses: int128/docker-manifest-create-action@v2
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/janitorr:${{ steps.branch_name.outputs.value }}
            ${{ (startsWith(github.ref, 'refs/tags/v') && format('ghcr.io/{0}/janitorr:latest', github.repository_owner)) || '' }}
            ${{ (startsWith(github.ref, 'refs/tags/v') && format('ghcr.io/{0}/janitorr:{1}', github.repository_owner, steps.version_number.outputs.value)) || '' }}
          sources: |
            ghcr.io/${{ github.repository_owner }}/janitorr:amd64-${{ steps.branch_name.outputs.value }}
            ghcr.io/${{ github.repository_owner }}/janitorr:arm64-${{ steps.branch_name.outputs.value }}
          
